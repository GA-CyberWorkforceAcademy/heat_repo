heat_template_version: rocky

description: Georgia Technology Authority Event

parameters:

  username:
    type: string
    label: Security Onion Username
    description: Username used to log in to various Security Onion services
    default: gmips
  userpass:
    type: string
    label: Security Onion Password
    description: Password used to log in to various Security Onion services
    default: gmips123
  domainpass:
    type: string
    label: Domain Safe Mode Password
    description: Domain administrator password
    default: P@$$word123
  domain_name:
    type: string
    label: Domain Name
    description: Domain name
    default: gmips.gov
  domain_netbios_name:
    type: string
    label: Domain NetBIOS name
    description: NetBIOS name for created domain
    default: gmips
  sopass:
    type: string
    label: password for so user
    description: Password for the 'so' user on both so_master and so_gateway
    default: so

resources:

## Red Team
  red_net:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
  red_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: red_net }
      cidr: 10.220.0.0/24
      dns_nameservers:
        - 10.101.255.254
      gateway_ip: 10.220.0.254
  red_gateway_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: red_net }
      fixed_ips:
        - ip_address: 10.220.0.254
  red_zun_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: red_net }

## Enterprise Network
  green_net:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
  green_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: green_net }
      cidr: 10.221.0.0/24
      dns_nameservers:
        - 10.101.255.254
        - 10.221.0.10
      gateway_ip: 10.221.0.254
  green_gateway_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: green_net }
      fixed_ips:
        - ip_address: 10.221.0.254
  green_domain_controller_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: green_net }
      fixed_ips:
        - ip_address: 10.221.0.10

## DMZ
  white_net:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
  white_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: white_net }
      cidr: 10.222.0.0/24
      dns_nameservers:
        - 10.101.255.254
      gateway_ip: 10.222.0.254
  white_gateway_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: white_net }
      fixed_ips:
        - ip_address: 10.222.0.254
  white_server_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: white_net }
      fixed_ips:
        - ip_address: 10.222.0.15


## Security Onion Master
  blue_net:
    type: OS::Neutron::Net
    properties:
      port_security_enabled: false
  blue_subnet:
    type: OS::Neutron::Subnet
    properties:
      network: { get_resource: blue_net }
      cidr: 10.223.0.0/24
      dns_nameservers:
        - 10.101.255.254
      gateway_ip: 10.223.0.254
  blue_gateway_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: blue_net }
      fixed_ips:
        - ip_address: 10.223.0.254
  blue_master_port:
    type: OS::Neutron::Port
    properties:
      network: { get_resource: blue_net }
      fixed_ips:
        - ip_address: 10.223.0.250

## Signals
## Pause stack creation until gateway is functional
  wait_for_gateway_networking:
    type: OS::Heat::WaitCondition
    properties:
      timeout: 1200
      count: 1
      handle: { get_resource: wait_for_gateway_networking_handle }
  wait_for_gateway_networking_handle:
    type: OS::Heat::WaitConditionHandle
    properties:
      signal_transport: TOKEN_SIGNAL

## Pause stack creation until SO master is functional
  wait_for_master_completion:
    type: OS::Heat::WaitCondition
    properties:
      timeout: 1800
      count: 1
      handle: { get_resource: wait_for_master_completion_handle }
  wait_for_master_completion_handle:
    type: OS::Heat::WaitConditionHandle
    properties:
      signal_transport: TOKEN_SIGNAL

## Pause stack creation until Domain controller is functional
  wait_for_domain_completion:
    type: OS::Heat::WaitCondition
    properties:
      timeout: 1800
      count: 1
      handle: { get_resource: wait_for_domain_completion_handle }
  wait_for_domain_completion_handle:
    type: OS::Heat::WaitConditionHandle
    properties:
      signal_transport: TOKEN_SIGNAL

## Pause stack creation until ms3 is functional
  wait_for_ms3_completion:
    type: OS::Heat::WaitCondition
    properties:
      timeout: 1800
      count: 1
      handle: { get_resource: wait_for_ms3_completion_handle }
  wait_for_ms3_completion_handle:
    type: OS::Heat::WaitConditionHandle
    properties:
      signal_transport: TOKEN_SIGNAL

## Pause stack creation until gateway is fully functional
  wait_for_so_gateway_final_completion:
    type: OS::Heat::WaitCondition
    properties:
      timeout: 3600
      count: 1
      handle: { get_resource: wait_for_so_gateway_final_completion_handle }
  wait_for_so_gateway_final_completion_handle:
    type: OS::Heat::WaitConditionHandle
    properties:
      signal_transport: TOKEN_SIGNAL

## Testing zun container in stack
## bug report opened for serial display on zun-created containers
##  kali_container:
##    type: OS::Zun::Container
##    properties:
##      name: kali
##      workdir: /root
##      image: "kalilinux/kali-rolling:latest"
##      image_driver: docker
##      command: /bin/bash
##      hostname: kali
##      cpu: 1
##      interactive: true
##      memory: 512
##      networks:
##        - port: { get_resource: red_zun_port }

## Box serves as core router and SO heavy node
## Need way to signal master completion and pause/resume establishment of heavy node
  gateway:
    type: OS::Nova::Server
    properties:
      name: so_gateway
      flavor: hack.massive
      networks:
        - port: { get_resource: red_gateway_port } #ens3
        - port: { get_resource: green_gateway_port } #ens4
        - port: { get_resource: white_gateway_port } #ens5
        - port: { get_resource: blue_gateway_port } #ens6
        - network: Public #ens7
      image: "Security Onion"
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            ## Set password for so user
            echo "so:$sopass" | chpasswd

            ## Clean up routing
            rm /etc/network/interfaces.d/50-cloud-init.cfg
            /bin/cat <<__EOF__ >/etc/network/interfaces
            auto lo
            iface lo inet loopback
            auto ens3
            iface ens3 inet static
            address 10.220.0.254/24
            auto ens4
            iface ens4 inet static
            address 10.221.0.254/24
            auto ens5
            iface ens5 inet static
            address 10.222.0.254/24
            auto ens6
            iface ens6 inet static
            address 10.223.0.254/24
            auto ens7
            __EOF__
            for num in {3..6};do dhclient -r ens$num ; ifdown ens$num ; ip route delete default dev ens$num ; ifup ens$num;done

            ## Allow forwarding
            sysctl -w net.ipv4.ip_forward=1
            echo net.ipv4.ip_forward=1 >> /etc/sysctl.conf

            ## NAT Stuff
            ## By default, only allow communication out of gateway - no inter-net comms
            iptables -t nat -A POSTROUTING -o ens7 -j MASQUERADE
            for num in {3..6}
            do
            iptables -A FORWARD -i ens7 -o ens$num -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables -A FORWARD -i ens$num -o ens7 -j ACCEPT
            done

            ## Allow web and ftp traffic red net to DMZ
            iptables -A FORWARD -p icmp -i ens3 -o ens5 -j ACCEPT
            iptables -A FORWARD -p icmp -i ens5 -o ens3 -j ACCEPT
            iptables -A FORWARD -p tcp -m multiport --dport 20,21,22,23,80,445 -i ens3 -o ens5 -j ACCEPT
            iptables -A FORWARD -p tcp -i ens5 -o ens3 -m state --state RELATED,ESTABLISHED -j ACCEPT 
            
            ## Allow SSH between dmz & blue net
            iptables -A FORWARD -p tcp --dport ssh -i ens5 -o ens6 -m state --state RELATED,ESTABLISHED -j ACCEPT
            
            ## Allow blue net to DMZ + Enterprise
            for num in {3..5}
            do
            iptables -A FORWARD -i ens6 -o ens$num -j ACCEPT
            iptables -A FORWARD -i ens$num -o ens6 -m state --state RELATED,ESTABLISHED -j ACCEPT
            done
            ## Enterprise to blue net for RDP
            iptables -A FORWARD -p tcp --dport 3389 -i ens4 -o ens6 -j ACCEPT
            iptables -A FORWARD -i ens6 -o ens4 -m state --state RELATED,ESTABLISHED -j ACCEPT

            iptables-save > /etc/iptables.rules

            ## install iptables-persistent
            apt-get update
            apt-get install -y iptables-persistent
            dpkg-reconfigure iptables-persistent -p critical

            ## Resolve hostname
            echo -n "127.0.1.2 " >> /etc/hosts
            echo $(hostname) >> /etc/hosts

            ## Configure ssh and sshd
            echo StrictHostKeyChecking no >> /etc/ssh/ssh_config
            mkdir -p /root/.ssh
            touch /root/.ssh/id_rsa
            cat > "/root/.ssh/id_rsa" << __EOF__
            -----BEGIN RSA PRIVATE KEY-----
            MIIEogIBAAKCAQEAvm+2arR3Qeqs6sG0CdeVd5e6eELzpFnOSZGXlZhKsjlGOK79
            plGlO3XNSLkRjg+1VhgAtFQ4wGf7Df2D9M1ykyUUCC6MSbVP0/bgbzi8D3sX7nGj
            rOO+PPplDoFnKcFFV8YOwqhwNB4OD/6M5AqhPDgQo24ACiN1DCfeiyVtiuBOI7sC
            uuXLVeElPibWMnD6REVwQks95eH4yXWTqiENnUa7mKduY1hj73eV93UdQLNLKkcx
            Ab7zwDz4P1jODeCJX2jhBpHSw4yIj+ynTcAzI+K2RJ92cv0VpKcCaNVoxiure3Df
            oyWqiJAQ26D6hoH7U9oXP0LRUQet4LlC+R5XpwIDAQABAoIBAF1zNHDoXh1aq8AH
            jfHGePJW4ophUG42I6S2bUxbj0wmDu+B77bOGeczx6kIKDUuQC4fWTkkmzTP0cLr
            xPU8XB0Y9NuO/AivkJzTaQ8rKB3wqa241jjhCVmjBjQ4DAfRb9XCuzuKrITmur/e
            igTdsoF6ga+xKxPOkoGEjxB5LWgYEVP279VP8G2JTK8TKYBSZZ3YSNSbV/ELhCuJ
            POTepjzyCJdsvLTBcJm1qe0A5UrUgIi4e/jjz9gEe6Ntp9JGaD7gBUoYl1kw/9iA
            9QDok40xgib754SdsLd0c3+hlEDQqhlC/mZrq4P+6q4jT1DjDWvGkV3NYc+KVUc1
            WM9GpQECgYEA5wQkF66mj42BiKxNLu4hzVVxo4BDeQ0x4sXbv9JL1qi00k429aDi
            xFVbXkngeXPhM0YbXa215jZbCB2P+wIyYV31Vr64Z7/f9Q5Zlzj/dfWEtFFFXIh9
            WENrfv+okSAinyoCOu+4tHFg9m0FXyQM0TxPXQdZ1xCwHQ6Q+amhj5UCgYEA0wgW
            wrQdDfO6FeFTeMBkx61hHq1dQdGHKTCUqncSg+rzrqDgZB1pWpwZIcAW6gLfP6aV
            Pq86p65mv6vFrZn1hfUonhGcBHkJWh34Vh2wBNc15LeBuR2oU4ADYuaWZUHjhDcX
            Vq3/CA0qp/S8vd3ajxms4iz3gAHWYY6R/2cua0sCgYBoTOlSu+q9g2EJaOmMF72x
            LDObYyyTec6dGUHG0FanOxIwpVmQ+quHgxY2ctpjW1tAwBVY7TXkE4R0HIzGAk7m
            wPokyQUO6oVd6bWvXe+QvWHF26+aQJF/CSl+dEUSCNU40UmifFsDNPFXMQ+szeTv
            jvAyC0CXphQtekcgQWMNJQKBgBvgOKl1g1UBefZD8nPD7kwWEfssaWI1XEZLnYe6
            /N4iHhhWNe3jmLQYZJV5u00kHftZdON34CagOgBdn1okOTN9w+TFbLeGiX628MPn
            XgX1q6/PsboTOdX11fytevZbMsOXR2TyzPpySs0u3fOyp5k5igXCbNsi4v+2BoEX
            TyFrAoGAdetDm9cGN9kZRq8trS9AuM/U/yNqbUIxQpEuPtnQJIlEKc1CiROrvOZc
            VOBVsCb6yYKfnEgnJoSwFlmkXIFIi+lxVsbLCS4ruddqbhQ5VhpfsoXqr6LtSML7
            4BBJmfU9WoT6b7EFXCA1XPwbPQH7DJh3TKPUtcY+z3Y5C/2vFlI=
            -----END RSA PRIVATE KEY-----
            __EOF__
            chmod 600 /root/.ssh/id_rsa

            ## update so
            echo 'Acquire::http::proxy "http://cache.internal.georgiacyber.org:3142";' > /etc/apt/apt.conf.d/02proxy
            sed -i 's/\$REBOOT == "yes"/\$REBOOT == "skipmeplease"/' /usr/sbin/soup
            soup -y

            ## Signal that gateway networking is complete
            $signal_gateway_networking_complete


            ## write sosetup file for establishment of heavy node
            cat > "/root/sosetup.conf" << __EOF__
            # ANSWERFILE generated by sosetup -w option
            # Generation date: Sun Oct 13 18:58:14 EDT 2019
            # Generated on host so-gateway
            #
            # These fields were computed automatically
            #IP=172.17.0.1
            #CORES=4
            #ALL_INTERFACES=ens3 ens4 ens5 ens6 ens7
            #NUM_INTERFACES=5
            #
            # This field is specific to reading an answer file
            SNIFFING_INTERFACES='ens3 ens4 ens5 ens6 ens7'
            #
            # These fields were generated from your answers
            SERVER=0
            SERVERNAME=$so_master_address
            SSH_USERNAME='so'
            SGUIL_SERVER_NAME=securityonion
            SGUIL_CLIENT_USERNAME=''
            SGUIL_CLIENT_PASSWORD_1=''
            XPLICO_ENABLED=no
            OSSEC_AGENT_ENABLED=yes
            OSSEC_AGENT_LEVEL=5
            SALT=yes
            SENSOR=1
            BRO_ENABLED=yes
            IDS_ENGINE_ENABLED=yes
            SNORT_AGENT_ENABLED=yes
            BARNYARD2_ENABLED=yes
            PCAP_ENABLED=yes
            PCAP_AGENT_ENABLED=yes
            PRADS_ENABLED=no
            SANCP_AGENT_ENABLED=no
            PADS_AGENT_ENABLED=no
            HTTP_AGENT_ENABLED=no
            ARGUS_ENABLED=no
            IDS_RULESET='ETOPEN'
            OINKCODE=''
            PF_RING_SLOTS=4096
            IDS_ENGINE=snort
            IDS_LB_PROCS=1
            BRO_LB_PROCS=1
            EXTRACT_FILES=yes
            PCAP_SIZE=150
            PCAP_RING_SIZE=64
            PCAP_OPTIONS=''
            WARN_DISK_USAGE=80
            CRIT_DISK_USAGE=90
            DAYSTOKEEP=30
            DAYSTOREPAIR=7
            LOGSTASH_OUTPUT_REDIS=no
            LOGSTASH_INPUT_REDIS=no
            ELASTIC=yes
            FORWARD=
            LOG_SIZE_LIMIT=15000000000
            __EOF__

            ## disable the internal firewall
            ufw disable
            ## wait until nc exits, then run setup
            nc -l 12345 -q 5
            sosetup -yf /root/sosetup.conf
            ufw disable
            wget https://github.com/GA-CyberWorkforceAcademy/metaTest/raw/master/pcaps/EK1.pcap -O /TRA_Pcaps/EK1.pcap
            wget https://github.com/GA-CyberWorkforceAcademy/metaTest/raw/master/pcaps/EK2.pcap -O /TRA_Pcaps/EK2.pcap
            wget https://github.com/GA-CyberWorkforceAcademy/metaTest/raw/master/pcaps/EK3.pcap -O /TRA_Pcaps/EK3.pcap
            ## Signal that gateway final is complete
            $signal_gateway_final_complete
          params:
            $signal_gateway_networking_complete: { get_attr: [wait_for_gateway_networking_handle, curl_cli] }
            $signal_gateway_final_complete: { get_attr: [wait_for_so_gateway_final_completion_handle, curl_cli] }
            $so_master_address: { get_attr: [blue_master_port, fixed_ips, 0, ip_address] }
            $sopass: { get_param: sopass }

  so_master:
    type: OS::Nova::Server
    depends_on: wait_for_gateway_networking
    properties:
      name: so_master
      flavor: hack.massive
      networks:
        - port: { get_resource: blue_master_port }
      image: "Security Onion"
      config_drive: true
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash

            ## Set password for so user
            echo "so:$sopass" | chpasswd

            mkdir -p /home/so/.ssh/ && touch /home/so/.ssh/authorized_keys
            cat > "/home/so/.ssh/authorized_keys" << __EOF__
            ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC+b7ZqtHdB6qzqwbQJ15V3l7p4QvOkWc5JkZeVmEqyOUY4rv2mUaU7dc1IuRGOD7VWGAC0VDjAZ/sN/YP0zXKTJRQILoxJtU/T9uBvOLwPexfucaOs4748+mUOgWcpwUVXxg7CqHA0Hg4P/ozkCqE8OBCjbgAKI3UMJ96LJW2K4E4juwK65ctV4SU+JtYycPpERXBCSz3l4fjJdZOqIQ2dRruYp25jWGPvd5X3dR1As0sqRzEBvvPAPPg/WM4N4IlfaOEGkdLDjIiP7KdNwDMj4rZEn3Zy/RWkpwJo1WjGK6t7cN+jJaqIkBDboPqGgftT2hc/QtFRB63guUL5Hlen
            __EOF__
            chown -R so:so /home/so/.ssh
            echo "so ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

            ## update so
            echo 'Acquire::http::proxy "http://cache.internal.georgiacyber.org:3142";' > /etc/apt/apt.conf.d/02proxy
            sed -i 's/\$REBOOT == "yes"/\$REBOOT == "skipmeplease"/' /usr/sbin/soup
            soup -y

            cat > "/root/sosetup.conf" << __EOF__
            # ANSWERFILE generated by sosetup -w option
            # Generation date: Sun Oct 13 15:26:45 EDT 2019
            # Generated on host test-so-master-rq7xgvcecfct
            #
            # These fields were computed automatically
            #IP=172.17.0.1
            #CORES=4
            #ALL_INTERFACES=ens3
            #NUM_INTERFACES=1
            #
            # This field is specific to reading an answer file
            SNIFFING_INTERFACES='ens3'
            #
            # These fields were generated from your answers
            SERVER=1
            SERVERNAME=localhost
            SSH_USERNAME=''
            SGUIL_SERVER_NAME=securityonion
            SGUIL_CLIENT_USERNAME='$username'
            SGUIL_CLIENT_PASSWORD_1='$userpass'
            XPLICO_ENABLED=no
            OSSEC_AGENT_ENABLED=yes
            OSSEC_AGENT_LEVEL=5
            SALT=yes
            SENSOR=0
            BRO_ENABLED=yes
            IDS_ENGINE_ENABLED=yes
            SNORT_AGENT_ENABLED=yes
            BARNYARD2_ENABLED=yes
            PCAP_ENABLED=yes
            PCAP_AGENT_ENABLED=yes
            PRADS_ENABLED=no
            SANCP_AGENT_ENABLED=no
            PADS_AGENT_ENABLED=no
            HTTP_AGENT_ENABLED=no
            ARGUS_ENABLED=no
            IDS_RULESET='ETOPEN'
            OINKCODE=''
            PF_RING_SLOTS=4096
            IDS_ENGINE=Suricata
            IDS_LB_PROCS=1
            BRO_LB_PROCS=1
            EXTRACT_FILES=yes
            PCAP_SIZE=150
            PCAP_RING_SIZE=64
            PCAP_OPTIONS='-c'
            WARN_DISK_USAGE=80
            CRIT_DISK_USAGE=90
            DAYSTOKEEP=30
            DAYSTOREPAIR=7
            LOGSTASH_OUTPUT_REDIS=no
            LOGSTASH_INPUT_REDIS=no
            ELASTIC=yes
            FORWARD=
            LOG_SIZE_LIMIT=15000000000
            __EOF__

            sosetup -y -f /root/sosetup.conf
            ufw disable
            /var/ossec/bin/ossec-authd
            wget https://raw.githubusercontent.com/GA-CyberWorkforceAcademy/metaTest/master/SO_edits/index.php -O /var/www/so/index.php
            mkdir /var/www/so/Intel
            wget https://raw.githubusercontent.com/GA-CyberWorkforceAcademy/metaTest/master/SO_edits/index.html -O /var/www/so/Intel/index.html
            $signal_master_complete
            echo master_done | nc 10.223.0.254 12345
          params:
            $signal_master_complete: { get_attr: [wait_for_master_completion_handle, curl_cli] }
            $username: { get_param: username }
            $userpass: { get_param: userpass }
            $sopass: { get_param: sopass }

  kali_workstations:
    type: OS::Heat::ResourceGroup
    depends_on: wait_for_gateway_networking
    properties:
##Increase count to 5 for group event
      count: 1
      resource_def:
        type: OS::Nova::Server
        properties:
          name: penTest-Host
          flavor: hack.massive
          networks:
            - network: { get_resource: red_net }
          image: Kali Rolling
          user_data_format: RAW
          user_data: |
            #!/bin/bash
            echo "root:toor" | chpasswd
            apt-get update 
            apt-get install gem ruby-dev
            git clone https://github.com/iagox86/dnscat2.git
            cd dnscat2/server/
            gem install bundler
            bundle install
        

  ms3_ubuntu:
    type: OS::Nova::Server
    depends_on: wait_for_gateway_networking
    properties:
      name: Ubuntu Workstation
      flavor: cy.large
      networks:
        - port: { get_resource: white_server_port }
      image: Ubuntu 14.04
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            echo "root:toor" | chpasswd
            # --- install modified metasploitable3
            echo "Setup Metasploitable3"
            apt-get install -y curl git
            git clone https://github.com/GA-CyberWorkforceAcademy/metaTest.git
            curl -L https://omnitruck.chef.io/install.sh | bash -s -- -v 13.8.5
            mkdir /var/chef

            cat > "/metaTest/chef/cookbooks/ms3.json" << __EOF__
            {
            "run_list": [
            "metasploitable::users",
            "metasploitable::mysql",
            "metasploitable::apache_continuum",
            "metasploitable::apache",
            "metasploitable::php_545",
            "metasploitable::phpmyadmin",
            "metasploitable::proftpd",
            "metasploitable::docker",
            "metasploitable::samba",
            "metasploitable::sinatra",
            "metasploitable::chatbot",
            "metasploitable::payroll_app",
            "metasploitable::knockd",
            "metasploitable::iptables"
            ]
            }
            __EOF__
            chef-solo -j /metaTest/chef/cookbooks/ms3.json --config-option cookbook_path=/metaTest/chef/cookbooks
            ## msf cookbook disables all non-tcp connections - disable iptables completely per request
            service iptables-persistent flush
            update-rc.d -f iptables-persistent remove

            ## install wazuh
            apt-get install curl apt-transport-https lsb-release
            curl -s https://packages.wazuh.com/key/GPG-KEY-WAZUH | apt-key add -
            echo "deb https://packages.wazuh.com/3.x/apt/ stable main" | tee /etc/apt/sources.list.d/wazuh.list
            apt-get update && apt-get install wazuh-agent -y
            /var/ossec/bin/agent-auth -m $so_master_address
            git clone https://github.com/iagox86/dnscat2.git
            cd dnscat2/client/
            make
                        
            $signal_ms3_complete
            exit 1001
          params:
            $signal_ms3_complete: { get_attr: [wait_for_ms3_completion_handle, curl_cli] }
            $so_master_address: { get_attr: [blue_master_port, fixed_ips, 0, ip_address] }

  domain_controller:
    type: OS::Nova::Server
    depends_on: wait_for_gateway_networking
    properties:
      name: domain_controller
      flavor: cy.large
      networks:
        - port: { get_resource: green_domain_controller_port }
      image: Windows Server 2016 DE
      user_data_format: RAW
      user_data:
        str_replace:
          template: |
            #ps1_sysnative
            $ErrorActionPreference = 'Stop'
            if (!(Test-Path domain_done)) {
            secedit /export /cfg c:\secpol.cfg
            (gc C:\secpol.cfg).replace("PasswordComplexity = 1", "PasswordComplexity = 0") | Out-File C:\secpol.cfg
            secedit /configure /db c:\windows\security\local.sdb /cfg c:\secpol.cfg /areas SECURITYPOLICY
            rm -force c:\secpol.cfg -confirm:$false
            netsh advfirewall set allprofiles state off
            Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools
            $user = [ADSI]'WinNT://./Administrator'
            $user.SetPassword('safe_mode_administrator_password')
            Import-Module ADDSDeployment
            $safeModePwd = (ConvertTo-SecureString 'safe_mode_administrator_password' -AsPlainText -Force)
            Install-ADDSForest -DomainName 'domain_name' -DomainNetbiosName 'domain_netbios_name' -SafeModeAdministratorPassword $safeModePwd -InstallDns -NoRebootOnCompletion -Force
            [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11"
            Invoke-WebRequest -Method POST -Headers @{"X-Auth-Token" = "$xauthtoken" ; "Content-Type" = "application/json" ; "Accept" = "application/json"} -Uri $endpoint -UseBasicParsing
            New-Item -ItemType file domain_done
            exit 1003
            }

            if (!(Test-Path users_done)) {
            $password = (ConvertTo-SecureString 'safe_mode_administrator_password' -AsPlainText -Force)
            $cred = New-Object System.Management.Automation.PSCredential ("domain_name\administrator", $password)
            Import-Module ActiveDirectory

            ## First boot of new DC takes awhile.. try until success for up to 10 minutes.
            ## To create random strings, user this:
            ## cat names | while read name;do echo "New-ADUser -Credential \$cred -Server internal.gmips.gov -Name \""$name"\" -GivenName \""$(echo $name | awk '{ print $1 }')"\"        \
            ## -Surname \""$(echo $name | awk '{ print $2 }')"\" -SamAccountName \""$(echo $name | awk '{ print $1 }').$(echo $name | awk '{ print $2 }')"\" -UserPrincipalName         \
            ## \""$(echo $name | awk '{ print $1 }').$(echo $name | awk '{ print $2 }')@gmips.gov"\" -AccountPassword (ConvertTo-SecureString \""$(head /dev/urandom | tr -dc A-Za-z0-9   \
            ## | head -c 5 ; echo '')"\" -AsPlainText -force) -Enabled \$true"; done
            $break = $false
            [int]$attempt = "0"
            do {
              try {
                New-ADUser -Credential $cred -Server domain_name -Name "Adam Garrett" -GivenName "Adam" -Surname "Garrett" -SamAccountName "Adam.Garrett" -UserPrincipalName "Adam.Garrett@gmips.gov" -AccountPassword (ConvertTo-SecureString "CphTH" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Darrell Wells" -GivenName "Darrell" -Surname "Wells" -SamAccountName "Darrell.Wells" -UserPrincipalName "Darrell.Wells@gmips.gov" -AccountPassword (ConvertTo-SecureString "poki5" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Dennis Bishop" -GivenName "Dennis" -Surname "Bishop" -SamAccountName "Dennis.Bishop" -UserPrincipalName "Dennis.Bishop@gmips.gov" -AccountPassword (ConvertTo-SecureString "rS459" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Phyllis Kennedy" -GivenName "Phyllis" -Surname "Kennedy" -SamAccountName "Phyllis.Kennedy" -UserPrincipalName "Phyllis.Kennedy@gmips.gov" -AccountPassword (ConvertTo-SecureString "ISSuN" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Stephanie Moody" -GivenName "Stephanie" -Surname "Moody" -SamAccountName "Stephanie.Moody" -UserPrincipalName "Stephanie.Moody@gmips.gov" -AccountPassword (ConvertTo-SecureString "vKwwa" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Lorenzo Hunter" -GivenName "Lorenzo" -Surname "Hunter" -SamAccountName "Lorenzo.Hunter" -UserPrincipalName "Lorenzo.Hunter@gmips.gov" -AccountPassword (ConvertTo-SecureString "9lxqU" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Johnathan Malone" -GivenName "Johnathan" -Surname "Malone" -SamAccountName "Johnathan.Malone" -UserPrincipalName "Johnathan.Malone@gmips.gov" -AccountPassword (ConvertTo-SecureString "9xsdE" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Jackie Woods" -GivenName "Jackie" -Surname "Woods" -SamAccountName "Jackie.Woods" -UserPrincipalName "Jackie.Woods@gmips.gov" -AccountPassword (ConvertTo-SecureString "veQKR" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Krystal Thomas" -GivenName "Krystal" -Surname "Thomas" -SamAccountName "Krystal.Thomas" -UserPrincipalName "Krystal.Thomas@gmips.gov" -AccountPassword (ConvertTo-SecureString "2zf8u" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Salvatore Boone" -GivenName "Salvatore" -Surname "Boone" -SamAccountName "Salvatore.Boone" -UserPrincipalName "Salvatore.Boone@gmips.gov" -AccountPassword (ConvertTo-SecureString "5wXzK" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Willie Barnes" -GivenName "Willie" -Surname "Barnes" -SamAccountName "Willie.Barnes" -UserPrincipalName "Willie.Barnes@gmips.gov" -AccountPassword (ConvertTo-SecureString "bYibp" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Beth Carpenter" -GivenName "Beth" -Surname "Carpenter" -SamAccountName "Beth.Carpenter" -UserPrincipalName "Beth.Carpenter@gmips.gov" -AccountPassword (ConvertTo-SecureString "em2L5" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Rhonda Zimmerman" -GivenName "Rhonda" -Surname "Zimmerman" -SamAccountName "Rhonda.Zimmerman" -UserPrincipalName "Rhonda.Zimmerman@gmips.gov" -AccountPassword (ConvertTo-SecureString "pQQc8" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Keith Bass" -GivenName "Keith" -Surname "Bass" -SamAccountName "Keith.Bass" -UserPrincipalName "Keith.Bass@gmips.gov" -AccountPassword (ConvertTo-SecureString "O2y6w" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Cameron Francis" -GivenName "Cameron" -Surname "Francis" -SamAccountName "Cameron.Francis" -UserPrincipalName "Cameron.Francis@gmips.gov" -AccountPassword (ConvertTo-SecureString "lvMPn" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Calvin Lopez" -GivenName "Calvin" -Surname "Lopez" -SamAccountName "Calvin.Lopez" -UserPrincipalName "Calvin.Lopez@gmips.gov" -AccountPassword (ConvertTo-SecureString "wHmo3" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Ronnie Lowe" -GivenName "Ronnie" -Surname "Lowe" -SamAccountName "Ronnie.Lowe" -UserPrincipalName "Ronnie.Lowe@gmips.gov" -AccountPassword (ConvertTo-SecureString "HWu7i" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Cory Hernandez" -GivenName "Cory" -Surname "Hernandez" -SamAccountName "Cory.Hernandez" -UserPrincipalName "Cory.Hernandez@gmips.gov" -AccountPassword (ConvertTo-SecureString "81P0Z" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Frances Estrada" -GivenName "Frances" -Surname "Estrada" -SamAccountName "Frances.Estrada" -UserPrincipalName "Frances.Estrada@gmips.gov" -AccountPassword (ConvertTo-SecureString "ry4gy" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Jimmie Potter" -GivenName "Jimmie" -Surname "Potter" -SamAccountName "Jimmie.Potter" -UserPrincipalName "Jimmie.Potter@gmips.gov" -AccountPassword (ConvertTo-SecureString "kDeg3" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Vicky Hamilton" -GivenName "Vicky" -Surname "Hamilton" -SamAccountName "Vicky.Hamilton" -UserPrincipalName "Vicky.Hamilton@gmips.gov" -AccountPassword (ConvertTo-SecureString "BxARG" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Traci Wheeler" -GivenName "Traci" -Surname "Wheeler" -SamAccountName "Traci.Wheeler" -UserPrincipalName "Traci.Wheeler@gmips.gov" -AccountPassword (ConvertTo-SecureString "NFgaZ" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Lana Wallace" -GivenName "Lana" -Surname "Wallace" -SamAccountName "Lana.Wallace" -UserPrincipalName "Lana.Wallace@gmips.gov" -AccountPassword (ConvertTo-SecureString "WV9dl" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Vanessa Cohen" -GivenName "Vanessa" -Surname "Cohen" -SamAccountName "Vanessa.Cohen" -UserPrincipalName "Vanessa.Cohen@gmips.gov" -AccountPassword (ConvertTo-SecureString "Y7lNl" -AsPlainText -force) -Enabled $true
                New-ADUser -Credential $cred -Server domain_name -Name "Alvin Doyle" -GivenName "Alvin" -Surname "Doyle" -SamAccountName "Alvin.Doyle" -UserPrincipalName "Alvin.Doyle@gmips.gov" -AccountPassword (ConvertTo-SecureString "GPWx4" -AsPlainText -force) -Enabled $true
                $break = $true
              }
              catch {
                if ($attempt -gt 10){
                  Write-Host "Could not create user on after $attempt attempts!"
                  $break = $true
                }
                else {
                  Write-Host "Creation of user failed... retrying"
                  Start-Sleep -Seconds 60
                  $attempt = $attempt + 1
                }
              }
            }
            While ($break -eq $false)
            New-Item -ItemType file users_done
            exit 1003
            }

            ### Make GPOs


            $break = $false
            [int]$attempt = "0"
            do {
              try {
                Set-GPRegistryValue -Server domain_name -Name "Default Domain Policy" -Key "HKLM\Software\Policies\Microsoft\Windows Defender" -ValueName DisableAntiSpyware -Type DWORD -Value 1
                Set-ADDefaultDomainPasswordPolicy -Server domain_name -Identity domain_name -ComplexityEnabled $False -ReversibleEncryptionEnabled $True -MinPasswordLength 6 -MaxPasswordAge 0
                $break = $true
              }
              catch {
                if ($attempt -gt 10){
                  Write-Host "Could not create GPOs after $attempt attempts!"
                  $break = $true
                }
                else {
                  Write-Host "GPO create failed... retrying"
                  Start-Sleep -Seconds 60
                  $attempt = $attempt + 1
                }
              }
            }
            While ($break -eq $false)
          params:
            safe_mode_administrator_password: { get_param: domainpass }
            domain_name: { get_param: domain_name }
            domain_netbios_name: { get_param: domain_netbios_name }
            $xauthtoken: { get_attr: [wait_for_domain_completion_handle, token] }
            $endpoint: { get_attr: [wait_for_domain_completion_handle, endpoint] }

  windows_workstations:
    type: OS::Heat::ResourceGroup
    depends_on: wait_for_domain_completion
    properties:
##Increase count to 15 for group event
      count: 3
      resource_def:
        type: OS::Nova::Server
        properties:
          name: Windows 10 Workstation %index%
          flavor: hack.massive
          networks:
            - network: { get_resource: green_net }
          image: Windows 10 Enterprise
          user_data_format: RAW
          user_data:
            str_replace:
              template: |
                #ps1_sysnative
                $ErrorActionPreference = 'Stop'
                $domain = "domain_name"
                $password = "admin_password" | ConvertTo-SecureString -asPlainText -Force
                $username = "$domain\administrator"
                $credential = New-Object System.Management.Automation.PSCredential -ArgumentList ($username,$password)
                $lmhosts = "$env:windir\System32\drivers\etc\lmhosts"
                "10.221.0.10 DOMAIN-CONTROLL #PRE #DOM:GMIPS.GOV" | Add-Content -PassThru $lmhosts
                "10.221.0.10 GMIPS.GOV x1b #PRE" | Add-Content -PassThru $lmhosts
                net user guest /active:yes
                [Net.ServicePointManager]::SecurityProtocol = "tls12, tls11"
                Invoke-WebRequest -Uri https://github.com/ytisf/theZoo/raw/master/malwares/Binaries/Ransomware.Jigsaw/Ransomware.Jigsaw.zip -Outfile c:\jigsaw.zip
                Invoke-WebRequest -Uri https://github.com/ytisf/theZoo/raw/master/malwares/Binaries/Ransomware.Cerber/Ransomware.Cerber.zip -Outfile c:\cerber.zip
                Invoke-WebRequest -Uri https://github.com/ytisf/theZoo/raw/master/malwares/Binaries/Win32.KeyPass/Win32.KeyPass.zip -Outfile c:\keypass.zip
                Expand-Archive -LiteralPath c:\jigsaw.zip -DestinationPath c:\RSdll
                Expand-Archive -LiteralPath c:\cerber.zip -DestinationPath c:\RSdll
                Expand-Archive -LiteralPath c:\keypass.zip -DestinationPath c:\RSdll
                Remove-Item –path c:\ -include *.zip
                Invoke-WebRequest -Uri https://packages.wazuh.com/3.x/windows/wazuh-agent-3.9.5-1.msi -Outfile c:\wazuh.msi
                start-process c:\wazuh.msi -ArgumentList 'ADDRESS="so_master_address" AUTHD_SERVER="so_master_address" /passive' -wait
                
                ## First boot of new DC takes awhile.. try until success for up to 25 minutes.
                $break = $false
                [int]$attempt = "0"
                do {
                  try {
                    Add-Computer -DomainName $domain -LocalCredential $credential -Credential $credential
                    $break = $true
                  }
                  catch {
                    if ($attempt -gt 25){
                      Write-Host "Could not join domain!"
                      $break = $true
                    }
                    else {
                      Write-Host "Join failed... retrying"
                      Start-Sleep -Seconds 60
                      $attempt = $attempt + 1
                    }
                  }
                }
                While ($break -eq $false)
                exit 1001
              params:
                admin_password: { get_param: domainpass }
                domain_name: { get_param: domain_name }
                so_master_address: { get_attr: [blue_master_port, fixed_ips, 0, ip_address] }

  analyst_workstations:
    type: OS::Heat::ResourceGroup
    depends_on: blue_net
    properties:
##Increase count to 15 for group event
      count: 1
      resource_def:
        type: OS::Nova::Server
        properties:
          flavor: cy.medium
          image: Debian LXQt
          name: analystVM
          networks:
          - network: {get_resource: blue_net}
          user_data:  |
            #!/bin/bash
            export DEBIAN_FRONTEND=noninteractive
            echo 127.0.0.1 $(hostname) >> /etc/hosts
            echo 10.223.0.250 SO.internal >> /etc/hosts
            echo 10.222.0.15 home.gmips.gov >> /etc/hosts
            apt-get -y update && apt-get install -y gtk2.0 build-essential git wireshark nmap xrdp
            git clone https://github.com/vanhauser-thc/thc-hydra.git && cd thc-hydra && ./configure && make install
            #---INSTALL NESSUS FROM DOWNLOAD
            dpkg -i Nessus-8.8.0-debian6_amd64.deb
            #---CREATE CLIENT USER
            useradd analyst -m -U -s /bin/bash; usermod -aG sudo analyst
            echo 'root:gmips123' | chpasswd; echo 'analyst:gmips123' | chpasswd
            #--STARTING SERVICES
            /etc/init.d/nessusd start
            cat > "/etc/polkit-1/localauthority.conf.d/02-allow-colord.conf" << __EOF__
            polkit.addRule(function(action, subject) {
            if ((action.id == “org.freedesktop.color-manager.create-device” || action.id == “org.freedesktop.color-manager.create-profile” || action.id == “org.freedesktop.color-manager.delete-device” || action.id == “org.freedesktop.color-manager.delete-profile” || action.id == “org.freedesktop.color-manager.modify-device” || action.id == “org.freedesktop.color-manager.modify-profile”) && subject.isInGroup(“{group}”))
            {
            return polkit.Result.YES;
            }
            });
            __EOF__ 
            systemctl enable xrdp
            ## ALLOW RDP IN
            iptables -A INPUT -p tcp --dport 3389 -j ACCEPT
            iptables -A OUTPUT -p tcp --sport 3389 -m state --state RELATED,ESTABLISHED -j ACCEPT
            iptables-save > /etc/iptables.rules
          user_data_format: RAW
